/* Copyright Â© 2017 Apple Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-3-clause license that can
 * be found in the LICENSE.txt file or at https://opensource.org/licenses/BSD-3-Clause
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DictVectorizer.proto

#ifndef PROTOBUF_DictVectorizer_2eproto__INCLUDED
#define PROTOBUF_DictVectorizer_2eproto__INCLUDED

#include <string>

#include <protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <protobuf/arena.h>
#include <protobuf/arenastring.h>
#include <protobuf/generated_message_util.h>
#include <protobuf/message_lite.h>
#include <protobuf/repeated_field.h>
#include <protobuf/extension_set.h>
#include "DataStructures.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_DictVectorizer_2eproto();
void protobuf_InitDefaults_DictVectorizer_2eproto();
void protobuf_AssignDesc_DictVectorizer_2eproto();
void protobuf_ShutdownFile_DictVectorizer_2eproto();

class DictVectorizer;

// ===================================================================

class DictVectorizer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.DictVectorizer) */ {
 public:
  DictVectorizer();
  virtual ~DictVectorizer();

  DictVectorizer(const DictVectorizer& from);

  inline DictVectorizer& operator=(const DictVectorizer& from) {
    CopyFrom(from);
    return *this;
  }

  static const DictVectorizer& default_instance();

  enum MapCase {
    kStringToIndex = 1,
    kInt64ToIndex = 2,
    MAP_NOT_SET = 0,
  };

  static const DictVectorizer* internal_default_instance();

  void Swap(DictVectorizer* other);

  // implements Message ----------------------------------------------

  inline DictVectorizer* New() const { return New(NULL); }

  DictVectorizer* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DictVectorizer& from);
  void MergeFrom(const DictVectorizer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictVectorizer* other);
  void UnsafeMergeFrom(const DictVectorizer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CoreML.Specification.StringVector stringToIndex = 1;
  bool has_stringtoindex() const;
  void clear_stringtoindex();
  static const int kStringToIndexFieldNumber = 1;
  const ::CoreML::Specification::StringVector& stringtoindex() const;
  ::CoreML::Specification::StringVector* mutable_stringtoindex();
  ::CoreML::Specification::StringVector* release_stringtoindex();
  void set_allocated_stringtoindex(::CoreML::Specification::StringVector* stringtoindex);

  // optional .CoreML.Specification.Int64Vector int64ToIndex = 2;
  bool has_int64toindex() const;
  void clear_int64toindex();
  static const int kInt64ToIndexFieldNumber = 2;
  const ::CoreML::Specification::Int64Vector& int64toindex() const;
  ::CoreML::Specification::Int64Vector* mutable_int64toindex();
  ::CoreML::Specification::Int64Vector* release_int64toindex();
  void set_allocated_int64toindex(::CoreML::Specification::Int64Vector* int64toindex);

  MapCase Map_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.DictVectorizer)
 private:
  inline void set_has_stringtoindex();
  inline void set_has_int64toindex();

  inline bool has_Map() const;
  void clear_Map();
  inline void clear_has_Map();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  union MapUnion {
    MapUnion() {}
    ::CoreML::Specification::StringVector* stringtoindex_;
    ::CoreML::Specification::Int64Vector* int64toindex_;
  } Map_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_InitDefaults_DictVectorizer_2eproto_impl();
  friend void  protobuf_AddDesc_DictVectorizer_2eproto_impl();
  friend void protobuf_AssignDesc_DictVectorizer_2eproto();
  friend void protobuf_ShutdownFile_DictVectorizer_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DictVectorizer> DictVectorizer_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DictVectorizer

// optional .CoreML.Specification.StringVector stringToIndex = 1;
inline bool DictVectorizer::has_stringtoindex() const {
  return Map_case() == kStringToIndex;
}
inline void DictVectorizer::set_has_stringtoindex() {
  _oneof_case_[0] = kStringToIndex;
}
inline void DictVectorizer::clear_stringtoindex() {
  if (has_stringtoindex()) {
    delete Map_.stringtoindex_;
    clear_has_Map();
  }
}
inline  const ::CoreML::Specification::StringVector& DictVectorizer::stringtoindex() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DictVectorizer.stringToIndex)
  return has_stringtoindex()
      ? *Map_.stringtoindex_
      : ::CoreML::Specification::StringVector::default_instance();
}
inline ::CoreML::Specification::StringVector* DictVectorizer::mutable_stringtoindex() {
  if (!has_stringtoindex()) {
    clear_Map();
    set_has_stringtoindex();
    Map_.stringtoindex_ = new ::CoreML::Specification::StringVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DictVectorizer.stringToIndex)
  return Map_.stringtoindex_;
}
inline ::CoreML::Specification::StringVector* DictVectorizer::release_stringtoindex() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DictVectorizer.stringToIndex)
  if (has_stringtoindex()) {
    clear_has_Map();
    ::CoreML::Specification::StringVector* temp = Map_.stringtoindex_;
    Map_.stringtoindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictVectorizer::set_allocated_stringtoindex(::CoreML::Specification::StringVector* stringtoindex) {
  clear_Map();
  if (stringtoindex) {
    set_has_stringtoindex();
    Map_.stringtoindex_ = stringtoindex;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.DictVectorizer.stringToIndex)
}

// optional .CoreML.Specification.Int64Vector int64ToIndex = 2;
inline bool DictVectorizer::has_int64toindex() const {
  return Map_case() == kInt64ToIndex;
}
inline void DictVectorizer::set_has_int64toindex() {
  _oneof_case_[0] = kInt64ToIndex;
}
inline void DictVectorizer::clear_int64toindex() {
  if (has_int64toindex()) {
    delete Map_.int64toindex_;
    clear_has_Map();
  }
}
inline  const ::CoreML::Specification::Int64Vector& DictVectorizer::int64toindex() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DictVectorizer.int64ToIndex)
  return has_int64toindex()
      ? *Map_.int64toindex_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
inline ::CoreML::Specification::Int64Vector* DictVectorizer::mutable_int64toindex() {
  if (!has_int64toindex()) {
    clear_Map();
    set_has_int64toindex();
    Map_.int64toindex_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DictVectorizer.int64ToIndex)
  return Map_.int64toindex_;
}
inline ::CoreML::Specification::Int64Vector* DictVectorizer::release_int64toindex() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DictVectorizer.int64ToIndex)
  if (has_int64toindex()) {
    clear_has_Map();
    ::CoreML::Specification::Int64Vector* temp = Map_.int64toindex_;
    Map_.int64toindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DictVectorizer::set_allocated_int64toindex(::CoreML::Specification::Int64Vector* int64toindex) {
  clear_Map();
  if (int64toindex) {
    set_has_int64toindex();
    Map_.int64toindex_ = int64toindex;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.DictVectorizer.int64ToIndex)
}

inline bool DictVectorizer::has_Map() const {
  return Map_case() != MAP_NOT_SET;
}
inline void DictVectorizer::clear_has_Map() {
  _oneof_case_[0] = MAP_NOT_SET;
}
inline DictVectorizer::MapCase DictVectorizer::Map_case() const {
  return DictVectorizer::MapCase(_oneof_case_[0]);
}
inline const DictVectorizer* DictVectorizer::internal_default_instance() {
  return &DictVectorizer_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DictVectorizer_2eproto__INCLUDED
