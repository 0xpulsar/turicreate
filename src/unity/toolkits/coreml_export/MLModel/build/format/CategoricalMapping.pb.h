/* Copyright Â© 2017 Apple Inc. All rights reserved.
 *
 * Use of this source code is governed by a BSD-3-clause license that can
 * be found in the LICENSE.txt file or at https://opensource.org/licenses/BSD-3-Clause
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CategoricalMapping.proto

#ifndef PROTOBUF_CategoricalMapping_2eproto__INCLUDED
#define PROTOBUF_CategoricalMapping_2eproto__INCLUDED

#include <string>

#include <protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <protobuf/arena.h>
#include <protobuf/arenastring.h>
#include <protobuf/generated_message_util.h>
#include <protobuf/message_lite.h>
#include <protobuf/repeated_field.h>
#include <protobuf/extension_set.h>
#include "DataStructures.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_CategoricalMapping_2eproto();
void protobuf_InitDefaults_CategoricalMapping_2eproto();
void protobuf_AssignDesc_CategoricalMapping_2eproto();
void protobuf_ShutdownFile_CategoricalMapping_2eproto();

class CategoricalMapping;

// ===================================================================

class CategoricalMapping : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:CoreML.Specification.CategoricalMapping) */ {
 public:
  CategoricalMapping();
  virtual ~CategoricalMapping();

  CategoricalMapping(const CategoricalMapping& from);

  inline CategoricalMapping& operator=(const CategoricalMapping& from) {
    CopyFrom(from);
    return *this;
  }

  static const CategoricalMapping& default_instance();

  enum MappingTypeCase {
    kStringToInt64Map = 1,
    kInt64ToStringMap = 2,
    MAPPINGTYPE_NOT_SET = 0,
  };

  enum ValueOnUnknownCase {
    kStrValue = 101,
    kInt64Value = 102,
    VALUEONUNKNOWN_NOT_SET = 0,
  };

  static const CategoricalMapping* internal_default_instance();

  void Swap(CategoricalMapping* other);

  // implements Message ----------------------------------------------

  inline CategoricalMapping* New() const { return New(NULL); }

  CategoricalMapping* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CategoricalMapping& from);
  void MergeFrom(const CategoricalMapping& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoricalMapping* other);
  void UnsafeMergeFrom(const CategoricalMapping& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
  bool has_stringtoint64map() const;
  void clear_stringtoint64map();
  static const int kStringToInt64MapFieldNumber = 1;
  const ::CoreML::Specification::StringToInt64Map& stringtoint64map() const;
  ::CoreML::Specification::StringToInt64Map* mutable_stringtoint64map();
  ::CoreML::Specification::StringToInt64Map* release_stringtoint64map();
  void set_allocated_stringtoint64map(::CoreML::Specification::StringToInt64Map* stringtoint64map);

  // optional .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
  bool has_int64tostringmap() const;
  void clear_int64tostringmap();
  static const int kInt64ToStringMapFieldNumber = 2;
  const ::CoreML::Specification::Int64ToStringMap& int64tostringmap() const;
  ::CoreML::Specification::Int64ToStringMap* mutable_int64tostringmap();
  ::CoreML::Specification::Int64ToStringMap* release_int64tostringmap();
  void set_allocated_int64tostringmap(::CoreML::Specification::Int64ToStringMap* int64tostringmap);

  // optional string strValue = 101;
  private:
  bool has_strvalue() const;
  public:
  void clear_strvalue();
  static const int kStrValueFieldNumber = 101;
  const ::std::string& strvalue() const;
  void set_strvalue(const ::std::string& value);
  void set_strvalue(const char* value);
  void set_strvalue(const char* value, size_t size);
  ::std::string* mutable_strvalue();
  ::std::string* release_strvalue();
  void set_allocated_strvalue(::std::string* strvalue);

  // optional int64 int64Value = 102;
  private:
  bool has_int64value() const;
  public:
  void clear_int64value();
  static const int kInt64ValueFieldNumber = 102;
  ::google::protobuf::int64 int64value() const;
  void set_int64value(::google::protobuf::int64 value);

  MappingTypeCase MappingType_case() const;
  ValueOnUnknownCase ValueOnUnknown_case() const;
  // @@protoc_insertion_point(class_scope:CoreML.Specification.CategoricalMapping)
 private:
  inline void set_has_stringtoint64map();
  inline void set_has_int64tostringmap();
  inline void set_has_strvalue();
  inline void set_has_int64value();

  inline bool has_MappingType() const;
  void clear_MappingType();
  inline void clear_has_MappingType();

  inline bool has_ValueOnUnknown() const;
  void clear_ValueOnUnknown();
  inline void clear_has_ValueOnUnknown();

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  union MappingTypeUnion {
    MappingTypeUnion() {}
    ::CoreML::Specification::StringToInt64Map* stringtoint64map_;
    ::CoreML::Specification::Int64ToStringMap* int64tostringmap_;
  } MappingType_;
  union ValueOnUnknownUnion {
    ValueOnUnknownUnion() {}
    ::google::protobuf::internal::ArenaStringPtr strvalue_;
    ::google::protobuf::int64 int64value_;
  } ValueOnUnknown_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[2];

  friend void  protobuf_InitDefaults_CategoricalMapping_2eproto_impl();
  friend void  protobuf_AddDesc_CategoricalMapping_2eproto_impl();
  friend void protobuf_AssignDesc_CategoricalMapping_2eproto();
  friend void protobuf_ShutdownFile_CategoricalMapping_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CategoricalMapping> CategoricalMapping_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoricalMapping

// optional .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
inline bool CategoricalMapping::has_stringtoint64map() const {
  return MappingType_case() == kStringToInt64Map;
}
inline void CategoricalMapping::set_has_stringtoint64map() {
  _oneof_case_[0] = kStringToInt64Map;
}
inline void CategoricalMapping::clear_stringtoint64map() {
  if (has_stringtoint64map()) {
    delete MappingType_.stringtoint64map_;
    clear_has_MappingType();
  }
}
inline  const ::CoreML::Specification::StringToInt64Map& CategoricalMapping::stringtoint64map() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  return has_stringtoint64map()
      ? *MappingType_.stringtoint64map_
      : ::CoreML::Specification::StringToInt64Map::default_instance();
}
inline ::CoreML::Specification::StringToInt64Map* CategoricalMapping::mutable_stringtoint64map() {
  if (!has_stringtoint64map()) {
    clear_MappingType();
    set_has_stringtoint64map();
    MappingType_.stringtoint64map_ = new ::CoreML::Specification::StringToInt64Map;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  return MappingType_.stringtoint64map_;
}
inline ::CoreML::Specification::StringToInt64Map* CategoricalMapping::release_stringtoint64map() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  if (has_stringtoint64map()) {
    clear_has_MappingType();
    ::CoreML::Specification::StringToInt64Map* temp = MappingType_.stringtoint64map_;
    MappingType_.stringtoint64map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CategoricalMapping::set_allocated_stringtoint64map(::CoreML::Specification::StringToInt64Map* stringtoint64map) {
  clear_MappingType();
  if (stringtoint64map) {
    set_has_stringtoint64map();
    MappingType_.stringtoint64map_ = stringtoint64map;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.stringToInt64Map)
}

// optional .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
inline bool CategoricalMapping::has_int64tostringmap() const {
  return MappingType_case() == kInt64ToStringMap;
}
inline void CategoricalMapping::set_has_int64tostringmap() {
  _oneof_case_[0] = kInt64ToStringMap;
}
inline void CategoricalMapping::clear_int64tostringmap() {
  if (has_int64tostringmap()) {
    delete MappingType_.int64tostringmap_;
    clear_has_MappingType();
  }
}
inline  const ::CoreML::Specification::Int64ToStringMap& CategoricalMapping::int64tostringmap() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  return has_int64tostringmap()
      ? *MappingType_.int64tostringmap_
      : ::CoreML::Specification::Int64ToStringMap::default_instance();
}
inline ::CoreML::Specification::Int64ToStringMap* CategoricalMapping::mutable_int64tostringmap() {
  if (!has_int64tostringmap()) {
    clear_MappingType();
    set_has_int64tostringmap();
    MappingType_.int64tostringmap_ = new ::CoreML::Specification::Int64ToStringMap;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  return MappingType_.int64tostringmap_;
}
inline ::CoreML::Specification::Int64ToStringMap* CategoricalMapping::release_int64tostringmap() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  if (has_int64tostringmap()) {
    clear_has_MappingType();
    ::CoreML::Specification::Int64ToStringMap* temp = MappingType_.int64tostringmap_;
    MappingType_.int64tostringmap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void CategoricalMapping::set_allocated_int64tostringmap(::CoreML::Specification::Int64ToStringMap* int64tostringmap) {
  clear_MappingType();
  if (int64tostringmap) {
    set_has_int64tostringmap();
    MappingType_.int64tostringmap_ = int64tostringmap;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.int64ToStringMap)
}

// optional string strValue = 101;
inline bool CategoricalMapping::has_strvalue() const {
  return ValueOnUnknown_case() == kStrValue;
}
inline void CategoricalMapping::set_has_strvalue() {
  _oneof_case_[1] = kStrValue;
}
inline void CategoricalMapping::clear_strvalue() {
  if (has_strvalue()) {
    ValueOnUnknown_.strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ValueOnUnknown();
  }
}
inline const ::std::string& CategoricalMapping::strvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.strValue)
  if (has_strvalue()) {
    return ValueOnUnknown_.strvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void CategoricalMapping::set_strvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.strValue)
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.strValue)
}
inline void CategoricalMapping::set_strvalue(const char* value) {
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.CategoricalMapping.strValue)
}
inline void CategoricalMapping::set_strvalue(const char* value, size_t size) {
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.CategoricalMapping.strValue)
}
inline ::std::string* CategoricalMapping::mutable_strvalue() {
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.strValue)
  return ValueOnUnknown_.strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CategoricalMapping::release_strvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.strValue)
  if (has_strvalue()) {
    clear_has_ValueOnUnknown();
    return ValueOnUnknown_.strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void CategoricalMapping::set_allocated_strvalue(::std::string* strvalue) {
  if (!has_strvalue()) {
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ValueOnUnknown();
  if (strvalue != NULL) {
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        strvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.strValue)
}

// optional int64 int64Value = 102;
inline bool CategoricalMapping::has_int64value() const {
  return ValueOnUnknown_case() == kInt64Value;
}
inline void CategoricalMapping::set_has_int64value() {
  _oneof_case_[1] = kInt64Value;
}
inline void CategoricalMapping::clear_int64value() {
  if (has_int64value()) {
    ValueOnUnknown_.int64value_ = GOOGLE_LONGLONG(0);
    clear_has_ValueOnUnknown();
  }
}
inline ::google::protobuf::int64 CategoricalMapping::int64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.int64Value)
  if (has_int64value()) {
    return ValueOnUnknown_.int64value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void CategoricalMapping::set_int64value(::google::protobuf::int64 value) {
  if (!has_int64value()) {
    clear_ValueOnUnknown();
    set_has_int64value();
  }
  ValueOnUnknown_.int64value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.int64Value)
}

inline bool CategoricalMapping::has_MappingType() const {
  return MappingType_case() != MAPPINGTYPE_NOT_SET;
}
inline void CategoricalMapping::clear_has_MappingType() {
  _oneof_case_[0] = MAPPINGTYPE_NOT_SET;
}
inline bool CategoricalMapping::has_ValueOnUnknown() const {
  return ValueOnUnknown_case() != VALUEONUNKNOWN_NOT_SET;
}
inline void CategoricalMapping::clear_has_ValueOnUnknown() {
  _oneof_case_[1] = VALUEONUNKNOWN_NOT_SET;
}
inline CategoricalMapping::MappingTypeCase CategoricalMapping::MappingType_case() const {
  return CategoricalMapping::MappingTypeCase(_oneof_case_[0]);
}
inline CategoricalMapping::ValueOnUnknownCase CategoricalMapping::ValueOnUnknown_case() const {
  return CategoricalMapping::ValueOnUnknownCase(_oneof_case_[1]);
}
inline const CategoricalMapping* CategoricalMapping::internal_default_instance() {
  return &CategoricalMapping_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CategoricalMapping_2eproto__INCLUDED
