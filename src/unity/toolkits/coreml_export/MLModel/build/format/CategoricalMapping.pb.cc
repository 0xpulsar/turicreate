// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CategoricalMapping.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CategoricalMapping.pb.h"

#include <algorithm>

#include <protobuf/stubs/common.h>
#include <protobuf/stubs/port.h>
#include <protobuf/stubs/once.h>
#include <protobuf/io/coded_stream.h>
#include <protobuf/wire_format_lite_inl.h>
#include <protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {

void protobuf_ShutdownFile_CategoricalMapping_2eproto() {
  CategoricalMapping_default_instance_.Shutdown();
}

void protobuf_InitDefaults_CategoricalMapping_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CoreML::Specification::protobuf_InitDefaults_DataStructures_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  CategoricalMapping_default_instance_.DefaultConstruct();
  CategoricalMapping_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_CategoricalMapping_2eproto_once_);
void protobuf_InitDefaults_CategoricalMapping_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_CategoricalMapping_2eproto_once_,
                 &protobuf_InitDefaults_CategoricalMapping_2eproto_impl);
}
void protobuf_AddDesc_CategoricalMapping_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_CategoricalMapping_2eproto();
  ::CoreML::Specification::protobuf_AddDesc_DataStructures_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CategoricalMapping_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CategoricalMapping_2eproto_once_);
void protobuf_AddDesc_CategoricalMapping_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CategoricalMapping_2eproto_once_,
                 &protobuf_AddDesc_CategoricalMapping_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CategoricalMapping_2eproto {
  StaticDescriptorInitializer_CategoricalMapping_2eproto() {
    protobuf_AddDesc_CategoricalMapping_2eproto();
  }
} static_descriptor_initializer_CategoricalMapping_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoricalMapping::kStringToInt64MapFieldNumber;
const int CategoricalMapping::kInt64ToStringMapFieldNumber;
const int CategoricalMapping::kStrValueFieldNumber;
const int CategoricalMapping::kInt64ValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoricalMapping::CategoricalMapping()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_CategoricalMapping_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.CategoricalMapping)
}

void CategoricalMapping::InitAsDefaultInstance() {
}

CategoricalMapping::CategoricalMapping(const CategoricalMapping& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.CategoricalMapping)
}

void CategoricalMapping::SharedCtor() {
  clear_has_MappingType();
  clear_has_ValueOnUnknown();
  _cached_size_ = 0;
}

CategoricalMapping::~CategoricalMapping() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.CategoricalMapping)
  SharedDtor();
}

void CategoricalMapping::SharedDtor() {
  if (has_MappingType()) {
    clear_MappingType();
  }
  if (has_ValueOnUnknown()) {
    clear_ValueOnUnknown();
  }
}

void CategoricalMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CategoricalMapping& CategoricalMapping::default_instance() {
  protobuf_InitDefaults_CategoricalMapping_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CategoricalMapping> CategoricalMapping_default_instance_;

CategoricalMapping* CategoricalMapping::New(::google::protobuf::Arena* arena) const {
  CategoricalMapping* n = new CategoricalMapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoricalMapping::clear_MappingType() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.CategoricalMapping)
  switch (MappingType_case()) {
    case kStringToInt64Map: {
      delete MappingType_.stringtoint64map_;
      break;
    }
    case kInt64ToStringMap: {
      delete MappingType_.int64tostringmap_;
      break;
    }
    case MAPPINGTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAPPINGTYPE_NOT_SET;
}

void CategoricalMapping::clear_ValueOnUnknown() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.CategoricalMapping)
  switch (ValueOnUnknown_case()) {
    case kStrValue: {
      ValueOnUnknown_.strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case VALUEONUNKNOWN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = VALUEONUNKNOWN_NOT_SET;
}


void CategoricalMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.CategoricalMapping)
  clear_MappingType();
  clear_ValueOnUnknown();
}

bool CategoricalMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.CategoricalMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtoint64map()));
        } else {
          goto handle_unusual;
        }
        goto after_int64tostringmap;
        break;
      }

      // optional .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64tostringmap()));
        } else {
          goto handle_unusual;
        }
       after_int64tostringmap:
        if (input->ExpectTag(810)) goto parse_strValue;
        break;
      }

      // optional string strValue = 101;
      case 101: {
        if (tag == 810) {
         parse_strValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strvalue()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strvalue().data(), this->strvalue().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CoreML.Specification.CategoricalMapping.strValue"));
        } else {
          goto handle_unusual;
        }
        goto after_int64value;
        break;
      }

      // optional int64 int64Value = 102;
      case 102: {
        if (tag == 816) {
          clear_ValueOnUnknown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ValueOnUnknown_.int64value_)));
          set_has_int64value();
        } else {
          goto handle_unusual;
        }
       after_int64value:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.CategoricalMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.CategoricalMapping)
  return false;
#undef DO_
}

void CategoricalMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.CategoricalMapping)
  // optional .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
  if (has_stringtoint64map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *MappingType_.stringtoint64map_, output);
  }

  // optional .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
  if (has_int64tostringmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *MappingType_.int64tostringmap_, output);
  }

  // optional string strValue = 101;
  if (has_strvalue()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strvalue().data(), this->strvalue().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CoreML.Specification.CategoricalMapping.strValue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      101, this->strvalue(), output);
  }

  // optional int64 int64Value = 102;
  if (has_int64value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(102, this->int64value(), output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.CategoricalMapping)
}

size_t CategoricalMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.CategoricalMapping)
  size_t total_size = 0;

  switch (MappingType_case()) {
    // optional .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
    case kStringToInt64Map: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *MappingType_.stringtoint64map_);
      break;
    }
    // optional .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
    case kInt64ToStringMap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *MappingType_.int64tostringmap_);
      break;
    }
    case MAPPINGTYPE_NOT_SET: {
      break;
    }
  }
  switch (ValueOnUnknown_case()) {
    // optional string strValue = 101;
    case kStrValue: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strvalue());
      break;
    }
    // optional int64 int64Value = 102;
    case kInt64Value: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int64value());
      break;
    }
    case VALUEONUNKNOWN_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoricalMapping::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CategoricalMapping*>(&from));
}

void CategoricalMapping::MergeFrom(const CategoricalMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.CategoricalMapping)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CategoricalMapping::UnsafeMergeFrom(const CategoricalMapping& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.MappingType_case()) {
    case kStringToInt64Map: {
      mutable_stringtoint64map()->::CoreML::Specification::StringToInt64Map::MergeFrom(from.stringtoint64map());
      break;
    }
    case kInt64ToStringMap: {
      mutable_int64tostringmap()->::CoreML::Specification::Int64ToStringMap::MergeFrom(from.int64tostringmap());
      break;
    }
    case MAPPINGTYPE_NOT_SET: {
      break;
    }
  }
  switch (from.ValueOnUnknown_case()) {
    case kStrValue: {
      set_strvalue(from.strvalue());
      break;
    }
    case kInt64Value: {
      set_int64value(from.int64value());
      break;
    }
    case VALUEONUNKNOWN_NOT_SET: {
      break;
    }
  }
}

void CategoricalMapping::CopyFrom(const CategoricalMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.CategoricalMapping)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CategoricalMapping::IsInitialized() const {

  return true;
}

void CategoricalMapping::Swap(CategoricalMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoricalMapping::InternalSwap(CategoricalMapping* other) {
  std::swap(MappingType_, other->MappingType_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(ValueOnUnknown_, other->ValueOnUnknown_);
  std::swap(_oneof_case_[1], other->_oneof_case_[1]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CategoricalMapping::GetTypeName() const {
  return "CoreML.Specification.CategoricalMapping";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoricalMapping

// optional .CoreML.Specification.StringToInt64Map stringToInt64Map = 1;
bool CategoricalMapping::has_stringtoint64map() const {
  return MappingType_case() == kStringToInt64Map;
}
void CategoricalMapping::set_has_stringtoint64map() {
  _oneof_case_[0] = kStringToInt64Map;
}
void CategoricalMapping::clear_stringtoint64map() {
  if (has_stringtoint64map()) {
    delete MappingType_.stringtoint64map_;
    clear_has_MappingType();
  }
}
 const ::CoreML::Specification::StringToInt64Map& CategoricalMapping::stringtoint64map() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  return has_stringtoint64map()
      ? *MappingType_.stringtoint64map_
      : ::CoreML::Specification::StringToInt64Map::default_instance();
}
::CoreML::Specification::StringToInt64Map* CategoricalMapping::mutable_stringtoint64map() {
  if (!has_stringtoint64map()) {
    clear_MappingType();
    set_has_stringtoint64map();
    MappingType_.stringtoint64map_ = new ::CoreML::Specification::StringToInt64Map;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  return MappingType_.stringtoint64map_;
}
::CoreML::Specification::StringToInt64Map* CategoricalMapping::release_stringtoint64map() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.stringToInt64Map)
  if (has_stringtoint64map()) {
    clear_has_MappingType();
    ::CoreML::Specification::StringToInt64Map* temp = MappingType_.stringtoint64map_;
    MappingType_.stringtoint64map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CategoricalMapping::set_allocated_stringtoint64map(::CoreML::Specification::StringToInt64Map* stringtoint64map) {
  clear_MappingType();
  if (stringtoint64map) {
    set_has_stringtoint64map();
    MappingType_.stringtoint64map_ = stringtoint64map;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.stringToInt64Map)
}

// optional .CoreML.Specification.Int64ToStringMap int64ToStringMap = 2;
bool CategoricalMapping::has_int64tostringmap() const {
  return MappingType_case() == kInt64ToStringMap;
}
void CategoricalMapping::set_has_int64tostringmap() {
  _oneof_case_[0] = kInt64ToStringMap;
}
void CategoricalMapping::clear_int64tostringmap() {
  if (has_int64tostringmap()) {
    delete MappingType_.int64tostringmap_;
    clear_has_MappingType();
  }
}
 const ::CoreML::Specification::Int64ToStringMap& CategoricalMapping::int64tostringmap() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  return has_int64tostringmap()
      ? *MappingType_.int64tostringmap_
      : ::CoreML::Specification::Int64ToStringMap::default_instance();
}
::CoreML::Specification::Int64ToStringMap* CategoricalMapping::mutable_int64tostringmap() {
  if (!has_int64tostringmap()) {
    clear_MappingType();
    set_has_int64tostringmap();
    MappingType_.int64tostringmap_ = new ::CoreML::Specification::Int64ToStringMap;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  return MappingType_.int64tostringmap_;
}
::CoreML::Specification::Int64ToStringMap* CategoricalMapping::release_int64tostringmap() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.int64ToStringMap)
  if (has_int64tostringmap()) {
    clear_has_MappingType();
    ::CoreML::Specification::Int64ToStringMap* temp = MappingType_.int64tostringmap_;
    MappingType_.int64tostringmap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CategoricalMapping::set_allocated_int64tostringmap(::CoreML::Specification::Int64ToStringMap* int64tostringmap) {
  clear_MappingType();
  if (int64tostringmap) {
    set_has_int64tostringmap();
    MappingType_.int64tostringmap_ = int64tostringmap;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.int64ToStringMap)
}

// optional string strValue = 101;
bool CategoricalMapping::has_strvalue() const {
  return ValueOnUnknown_case() == kStrValue;
}
void CategoricalMapping::set_has_strvalue() {
  _oneof_case_[1] = kStrValue;
}
void CategoricalMapping::clear_strvalue() {
  if (has_strvalue()) {
    ValueOnUnknown_.strvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_ValueOnUnknown();
  }
}
const ::std::string& CategoricalMapping::strvalue() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.strValue)
  if (has_strvalue()) {
    return ValueOnUnknown_.strvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void CategoricalMapping::set_strvalue(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.strValue)
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.strValue)
}
void CategoricalMapping::set_strvalue(const char* value) {
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CoreML.Specification.CategoricalMapping.strValue)
}
void CategoricalMapping::set_strvalue(const char* value, size_t size) {
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ValueOnUnknown_.strvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CoreML.Specification.CategoricalMapping.strValue)
}
::std::string* CategoricalMapping::mutable_strvalue() {
  if (!has_strvalue()) {
    clear_ValueOnUnknown();
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.CategoricalMapping.strValue)
  return ValueOnUnknown_.strvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CategoricalMapping::release_strvalue() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.CategoricalMapping.strValue)
  if (has_strvalue()) {
    clear_has_ValueOnUnknown();
    return ValueOnUnknown_.strvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void CategoricalMapping::set_allocated_strvalue(::std::string* strvalue) {
  if (!has_strvalue()) {
    ValueOnUnknown_.strvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_ValueOnUnknown();
  if (strvalue != NULL) {
    set_has_strvalue();
    ValueOnUnknown_.strvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        strvalue);
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.CategoricalMapping.strValue)
}

// optional int64 int64Value = 102;
bool CategoricalMapping::has_int64value() const {
  return ValueOnUnknown_case() == kInt64Value;
}
void CategoricalMapping::set_has_int64value() {
  _oneof_case_[1] = kInt64Value;
}
void CategoricalMapping::clear_int64value() {
  if (has_int64value()) {
    ValueOnUnknown_.int64value_ = GOOGLE_LONGLONG(0);
    clear_has_ValueOnUnknown();
  }
}
::google::protobuf::int64 CategoricalMapping::int64value() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.CategoricalMapping.int64Value)
  if (has_int64value()) {
    return ValueOnUnknown_.int64value_;
  }
  return GOOGLE_LONGLONG(0);
}
void CategoricalMapping::set_int64value(::google::protobuf::int64 value) {
  if (!has_int64value()) {
    clear_ValueOnUnknown();
    set_has_int64value();
  }
  ValueOnUnknown_.int64value_ = value;
  // @@protoc_insertion_point(field_set:CoreML.Specification.CategoricalMapping.int64Value)
}

bool CategoricalMapping::has_MappingType() const {
  return MappingType_case() != MAPPINGTYPE_NOT_SET;
}
void CategoricalMapping::clear_has_MappingType() {
  _oneof_case_[0] = MAPPINGTYPE_NOT_SET;
}
bool CategoricalMapping::has_ValueOnUnknown() const {
  return ValueOnUnknown_case() != VALUEONUNKNOWN_NOT_SET;
}
void CategoricalMapping::clear_has_ValueOnUnknown() {
  _oneof_case_[1] = VALUEONUNKNOWN_NOT_SET;
}
CategoricalMapping::MappingTypeCase CategoricalMapping::MappingType_case() const {
  return CategoricalMapping::MappingTypeCase(_oneof_case_[0]);
}
CategoricalMapping::ValueOnUnknownCase CategoricalMapping::ValueOnUnknown_case() const {
  return CategoricalMapping::ValueOnUnknownCase(_oneof_case_[1]);
}
inline const CategoricalMapping* CategoricalMapping::internal_default_instance() {
  return &CategoricalMapping_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
