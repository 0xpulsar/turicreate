// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DictVectorizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DictVectorizer.pb.h"

#include <algorithm>

#include <protobuf/stubs/common.h>
#include <protobuf/stubs/port.h>
#include <protobuf/stubs/once.h>
#include <protobuf/io/coded_stream.h>
#include <protobuf/wire_format_lite_inl.h>
#include <protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace CoreML {
namespace Specification {

void protobuf_ShutdownFile_DictVectorizer_2eproto() {
  DictVectorizer_default_instance_.Shutdown();
}

void protobuf_InitDefaults_DictVectorizer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CoreML::Specification::protobuf_InitDefaults_DataStructures_2eproto();
  DictVectorizer_default_instance_.DefaultConstruct();
  DictVectorizer_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_DictVectorizer_2eproto_once_);
void protobuf_InitDefaults_DictVectorizer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_DictVectorizer_2eproto_once_,
                 &protobuf_InitDefaults_DictVectorizer_2eproto_impl);
}
void protobuf_AddDesc_DictVectorizer_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_DictVectorizer_2eproto();
  ::CoreML::Specification::protobuf_AddDesc_DataStructures_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DictVectorizer_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DictVectorizer_2eproto_once_);
void protobuf_AddDesc_DictVectorizer_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DictVectorizer_2eproto_once_,
                 &protobuf_AddDesc_DictVectorizer_2eproto_impl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DictVectorizer_2eproto {
  StaticDescriptorInitializer_DictVectorizer_2eproto() {
    protobuf_AddDesc_DictVectorizer_2eproto();
  }
} static_descriptor_initializer_DictVectorizer_2eproto_;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictVectorizer::kStringToIndexFieldNumber;
const int DictVectorizer::kInt64ToIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictVectorizer::DictVectorizer()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_DictVectorizer_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:CoreML.Specification.DictVectorizer)
}

void DictVectorizer::InitAsDefaultInstance() {
}

DictVectorizer::DictVectorizer(const DictVectorizer& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CoreML.Specification.DictVectorizer)
}

void DictVectorizer::SharedCtor() {
  clear_has_Map();
  _cached_size_ = 0;
}

DictVectorizer::~DictVectorizer() {
  // @@protoc_insertion_point(destructor:CoreML.Specification.DictVectorizer)
  SharedDtor();
}

void DictVectorizer::SharedDtor() {
  if (has_Map()) {
    clear_Map();
  }
}

void DictVectorizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DictVectorizer& DictVectorizer::default_instance() {
  protobuf_InitDefaults_DictVectorizer_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DictVectorizer> DictVectorizer_default_instance_;

DictVectorizer* DictVectorizer::New(::google::protobuf::Arena* arena) const {
  DictVectorizer* n = new DictVectorizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DictVectorizer::clear_Map() {
// @@protoc_insertion_point(one_of_clear_start:CoreML.Specification.DictVectorizer)
  switch (Map_case()) {
    case kStringToIndex: {
      delete Map_.stringtoindex_;
      break;
    }
    case kInt64ToIndex: {
      delete Map_.int64toindex_;
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAP_NOT_SET;
}


void DictVectorizer::Clear() {
// @@protoc_insertion_point(message_clear_start:CoreML.Specification.DictVectorizer)
  clear_Map();
}

bool DictVectorizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CoreML.Specification.DictVectorizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CoreML.Specification.StringVector stringToIndex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stringtoindex()));
        } else {
          goto handle_unusual;
        }
        goto after_int64toindex;
        break;
      }

      // optional .CoreML.Specification.Int64Vector int64ToIndex = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int64toindex()));
        } else {
          goto handle_unusual;
        }
       after_int64toindex:
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CoreML.Specification.DictVectorizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CoreML.Specification.DictVectorizer)
  return false;
#undef DO_
}

void DictVectorizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CoreML.Specification.DictVectorizer)
  // optional .CoreML.Specification.StringVector stringToIndex = 1;
  if (has_stringtoindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *Map_.stringtoindex_, output);
  }

  // optional .CoreML.Specification.Int64Vector int64ToIndex = 2;
  if (has_int64toindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *Map_.int64toindex_, output);
  }

  // @@protoc_insertion_point(serialize_end:CoreML.Specification.DictVectorizer)
}

size_t DictVectorizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CoreML.Specification.DictVectorizer)
  size_t total_size = 0;

  switch (Map_case()) {
    // optional .CoreML.Specification.StringVector stringToIndex = 1;
    case kStringToIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Map_.stringtoindex_);
      break;
    }
    // optional .CoreML.Specification.Int64Vector int64ToIndex = 2;
    case kInt64ToIndex: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Map_.int64toindex_);
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DictVectorizer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DictVectorizer*>(&from));
}

void DictVectorizer::MergeFrom(const DictVectorizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CoreML.Specification.DictVectorizer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DictVectorizer::UnsafeMergeFrom(const DictVectorizer& from) {
  GOOGLE_DCHECK(&from != this);
  switch (from.Map_case()) {
    case kStringToIndex: {
      mutable_stringtoindex()->::CoreML::Specification::StringVector::MergeFrom(from.stringtoindex());
      break;
    }
    case kInt64ToIndex: {
      mutable_int64toindex()->::CoreML::Specification::Int64Vector::MergeFrom(from.int64toindex());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
}

void DictVectorizer::CopyFrom(const DictVectorizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CoreML.Specification.DictVectorizer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DictVectorizer::IsInitialized() const {

  return true;
}

void DictVectorizer::Swap(DictVectorizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictVectorizer::InternalSwap(DictVectorizer* other) {
  std::swap(Map_, other->Map_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DictVectorizer::GetTypeName() const {
  return "CoreML.Specification.DictVectorizer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DictVectorizer

// optional .CoreML.Specification.StringVector stringToIndex = 1;
bool DictVectorizer::has_stringtoindex() const {
  return Map_case() == kStringToIndex;
}
void DictVectorizer::set_has_stringtoindex() {
  _oneof_case_[0] = kStringToIndex;
}
void DictVectorizer::clear_stringtoindex() {
  if (has_stringtoindex()) {
    delete Map_.stringtoindex_;
    clear_has_Map();
  }
}
 const ::CoreML::Specification::StringVector& DictVectorizer::stringtoindex() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DictVectorizer.stringToIndex)
  return has_stringtoindex()
      ? *Map_.stringtoindex_
      : ::CoreML::Specification::StringVector::default_instance();
}
::CoreML::Specification::StringVector* DictVectorizer::mutable_stringtoindex() {
  if (!has_stringtoindex()) {
    clear_Map();
    set_has_stringtoindex();
    Map_.stringtoindex_ = new ::CoreML::Specification::StringVector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DictVectorizer.stringToIndex)
  return Map_.stringtoindex_;
}
::CoreML::Specification::StringVector* DictVectorizer::release_stringtoindex() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DictVectorizer.stringToIndex)
  if (has_stringtoindex()) {
    clear_has_Map();
    ::CoreML::Specification::StringVector* temp = Map_.stringtoindex_;
    Map_.stringtoindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictVectorizer::set_allocated_stringtoindex(::CoreML::Specification::StringVector* stringtoindex) {
  clear_Map();
  if (stringtoindex) {
    set_has_stringtoindex();
    Map_.stringtoindex_ = stringtoindex;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.DictVectorizer.stringToIndex)
}

// optional .CoreML.Specification.Int64Vector int64ToIndex = 2;
bool DictVectorizer::has_int64toindex() const {
  return Map_case() == kInt64ToIndex;
}
void DictVectorizer::set_has_int64toindex() {
  _oneof_case_[0] = kInt64ToIndex;
}
void DictVectorizer::clear_int64toindex() {
  if (has_int64toindex()) {
    delete Map_.int64toindex_;
    clear_has_Map();
  }
}
 const ::CoreML::Specification::Int64Vector& DictVectorizer::int64toindex() const {
  // @@protoc_insertion_point(field_get:CoreML.Specification.DictVectorizer.int64ToIndex)
  return has_int64toindex()
      ? *Map_.int64toindex_
      : ::CoreML::Specification::Int64Vector::default_instance();
}
::CoreML::Specification::Int64Vector* DictVectorizer::mutable_int64toindex() {
  if (!has_int64toindex()) {
    clear_Map();
    set_has_int64toindex();
    Map_.int64toindex_ = new ::CoreML::Specification::Int64Vector;
  }
  // @@protoc_insertion_point(field_mutable:CoreML.Specification.DictVectorizer.int64ToIndex)
  return Map_.int64toindex_;
}
::CoreML::Specification::Int64Vector* DictVectorizer::release_int64toindex() {
  // @@protoc_insertion_point(field_release:CoreML.Specification.DictVectorizer.int64ToIndex)
  if (has_int64toindex()) {
    clear_has_Map();
    ::CoreML::Specification::Int64Vector* temp = Map_.int64toindex_;
    Map_.int64toindex_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DictVectorizer::set_allocated_int64toindex(::CoreML::Specification::Int64Vector* int64toindex) {
  clear_Map();
  if (int64toindex) {
    set_has_int64toindex();
    Map_.int64toindex_ = int64toindex;
  }
  // @@protoc_insertion_point(field_set_allocated:CoreML.Specification.DictVectorizer.int64ToIndex)
}

bool DictVectorizer::has_Map() const {
  return Map_case() != MAP_NOT_SET;
}
void DictVectorizer::clear_has_Map() {
  _oneof_case_[0] = MAP_NOT_SET;
}
DictVectorizer::MapCase DictVectorizer::Map_case() const {
  return DictVectorizer::MapCase(_oneof_case_[0]);
}
inline const DictVectorizer* DictVectorizer::internal_default_instance() {
  return &DictVectorizer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Specification
}  // namespace CoreML

// @@protoc_insertion_point(global_scope)
